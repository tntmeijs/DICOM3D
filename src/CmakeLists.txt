set(MAIN_SOURCES main.cpp stb_defines.hpp)

set(CORE_SOURCES
    core/window.cpp
    core/window.hpp
    core/transform.cpp
    core/transform.hpp
    core/directory_watcher_windows.cpp
    core/directory_watcher_windows.hpp)

set(RENDERER_SOURCES
    renderer/renderer.cpp
    renderer/renderer.hpp)

set(OPENGL_SOURCES
    renderer/gl_format.hpp
    renderer/gl_shader.cpp
    renderer/gl_shader.hpp
    renderer/gl_texture_2d.cpp
    renderer/gl_texture_2d.hpp
    renderer/gl_texture_3d.cpp
    renderer/gl_texture_3d.hpp)

# Create the executable
add_executable(${PROJECT_NAME} ${MAIN_SOURCES} ${CORE_SOURCES} ${RENDERER_SOURCES} ${OPENGL_SOURCES})

# Use C++ 17
set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)
set_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 17 CXX_STANDARD_REQUIRED YES CXX_EXTENSIONS NO)

if(MSVC)
    # Use groups to keep files structured nicely
    source_group("main" FILES ${MAIN_SOURCES})
    source_group("core" FILES ${CORE_SOURCES})
    source_group("renderer" FILES ${RENDERER_SOURCES})
    source_group("opengl" FILES ${OPENGL_SOURCES})

    # Warning level and treat warnings as errors
    target_compile_options(${PROJECT_NAME} PRIVATE /W3 /WX)

    # Set the project as the Visual Studio startup project
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

	# Set the debugging working directory
	set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
endif(MSVC)
